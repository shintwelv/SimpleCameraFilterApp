//
//  CameraPreviewPresenter.swift
//  CameraFilterApp
//
//  Created by siheo on 11/27/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CameraPreviewPresentationLogic
{
    func presentLoginStatus(response: CameraPreview.LoginStatus.Response)
    func presentSignedOutUser(response: CameraPreview.SignOut.Response)
    func presentAllFilters(response: CameraPreview.FetchFilters.Response)
    func presentFrameImage(response: CameraPreview.DrawFrameImage.Response)
}

class CameraPreviewPresenter: CameraPreviewPresentationLogic
{
    weak var viewController: CameraPreviewDisplayLogic?
    
    // MARK: Do something
    
    func presentLoginStatus(response: CameraPreview.LoginStatus.Response) {
        let signedInUser = response.signedInUser
        
        switch signedInUser {
        case .Success(let user):
            if let user = user {
                let viewModel = CameraPreview.LoginStatus.ViewModel(signedInUserEmail: user.email)
                self.viewController?.displayLoginStatus(viewModel: viewModel)
            } else {
                let viewModel = CameraPreview.LoginStatus.ViewModel(signedInUserEmail: nil)
                self.viewController?.displayLoginStatus(viewModel: viewModel)
            }
        case .Failure(_):
            let viewModel = CameraPreview.LoginStatus.ViewModel(signedInUserEmail: nil)
            self.viewController?.displayLoginStatus(viewModel: viewModel)
        }
    }
    
    func presentSignedOutUser(response: CameraPreview.SignOut.Response) {
        let signedOutUser = response.signedOutUser
        
        switch signedOutUser {
        case .Success(let user):
            let viewModel = CameraPreview.SignOut.ViewModel(signedOutUserEmail: user.email)
            self.viewController?.displaySignedOutUser(viewModel: viewModel)
        case .Failure(_):
            let viewModel = CameraPreview.SignOut.ViewModel(signedOutUserEmail: nil)
            self.viewController?.displaySignedOutUser(viewModel: viewModel)
        }
    }
    
    func presentAllFilters(response: CameraPreview.FetchFilters.Response) {
        let filters = response.filters
        
        var filterNames:[String] = filters.map { $0.displayName }
        filterNames.insert("원본", at: 0)
        
        var filterInfos = filters.map {
            return CameraPreview.FilterInfo(filterId: $0.filterId, filterName: $0.displayName)
        }
        filterInfos.insert(
            CameraPreview.FilterInfo(filterId: UUID(), filterName: "원본"),
            at:0)
        
        let viewModel = CameraPreview.FetchFilters.ViewModel(filterInfos: filterInfos)
        viewController?.displayFilterNames(viewModel: viewModel)
    }
    
    func presentFrameImage(response: CameraPreview.DrawFrameImage.Response) {
        let frameImage = response.frameImage
        let commandBuffer = response.commandBuffer
        
        let viewModel = CameraPreview.DrawFrameImage.ViewModel(frameImage: frameImage, commandBuffer: commandBuffer)
        viewController?.displayFrameImage(viewModel: viewModel)
    }
}
